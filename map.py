import numpy as np
import requests
from ahrs.filters import EKF
from math import radians
from scipy.signal import butter, filtfilt
import matplotlib.pyplot as plt
from scipy.spatial.transform import Rotation as R


def get_sensor_data():
  # Make a GET request to the JSON endpoint
  response = requests.get('http://172.20.199.27:5000')

  # Check if the request was successful
  if response.status_code == 200:
    # Parse the JSON response
    return response.json()['data']

  else:
    print('Failed to retrieve JSON data')
    return []

def create_scatter_plot(x, y, filename):
  plt.figure(figsize=(8, 6))
  points = np.arange(len(x))  # Generating sequence to be used for color gradient
  plt.scatter(x, y, s=50, c=points, cmap='viridis', alpha=0.7)  # Using 'viridis' colormap

  plt.xlabel('X-axis')
  plt.ylabel('Y-axis')
  plt.title('Scatter Plot of X and Y Coordinates with Gradient')

  # Adding colorbar to indicate sequence
  plt.colorbar(label='Sequence')

  plt.savefig(f"plots/{filename}")

def create_3d_scatter_plot(x, y, z, filename):
  fig = plt.figure()
  ax = fig.add_subplot(111, projection='3d')
  
  ax.scatter(x, y, z, c='blue', marker='o')  # Scatter plot
  
  ax.set_xlabel('X Axis')
  ax.set_ylabel('Y Axis')
  ax.set_zlabel('Z Axis')
  
  plt.savefig(f"plots/{filename}")

# data = get_sensor_data()

# if not data:
#     print('No data')
#     exit()

# accs = []
# gyros = []

# for point in data:
#     accs.append([point['acc']['x'], point['acc']['y'], point['acc']['z']])
#     gyros.append([point['gyro']['x'], point['gyro']['y'], point['gyro']['z']])

# Random Data
# accs = [[-1.0, 0.08, 0.08], [-0.98, 0.03, 0.06], [-1.01, 0.04, 0.07], [-1.02, 0.01, 0.07], [-1.06, 0.0, 0.04], [-1.1, 0.02, 0.05], [-0.92, -0.06, 0.04], [-1.05, 0.06, 0.01], [-0.92, 0.01, 0.01], [-1.09, 0.03, 0.04], [-1.01, 0.1, 0.06], [-1.0, 0.07, 0.08], [-1.01, 0.06, 0.1], [-0.9, -0.0, 0.06], [-1.09, 0.0, -0.1], [-0.89, -0.02, 0.04], [-1.07, 0.03, -0.0], [-0.96, 0.03, 0.01], [-0.87, 0.0, 0.02], [-0.98, 0.02, -0.01], [-1.09, 0.05, -0.07], [-0.97, -0.01, -0.02], [-1.04, -0.03, -0.09], [-0.95, 0.07, -0.2], [-1.17, 0.09, -0.23], [-0.98, 0.1, -0.07], [-0.97, 0.06, -0.03], [-1.1, 0.12, -0.13], [-1.01, 0.1, 0.01], [-0.91, -0.05, -0.12], [-1.12, 0.13, -0.11], [-1.04, 0.08, -0.09], [-0.96, 0.04, -0.08]]
# gyros = [[0.14, -5.25, -1.89], [1.19, -3.01, -0.28], [-0.7, -5.39, 0.98], [-5.18, 1.19, -5.04], [-6.37, -3.22, 0.49], [-4.13, 7.98, 6.93], [0.28, -23.45, -14.42], [16.73, -8.61, 10.64], [11.34, -2.73, -4.13], [-11.97, -8.61, 8.47], [11.69, 3.15, -8.75], [-8.89, -4.06, 1.96], [17.22, 11.9, -9.03], [11.2, 5.74, -7.84], [0.0, -0.49, -0.49], [16.24, -21.49, 0.77], [11.9, 5.32, 7.63], [26.67, -28.21, -4.34], [13.86, 1.26, -4.69], [2.52, 5.32, 4.13], [1.12, -7.56, -4.06], [-1.05, -3.5, 1.26], [-1.4, -1.19, -7.0], [-8.33, 4.41, 9.1], [-10.15, -8.12, 0.77], [6.51, -4.41, -7.91], [20.93, -4.13, 7.7], [12.53, 6.58, 0.07], [10.01, 0.07, 4.55], [9.1, -1.89, -4.69], [-2.52, -7.98, 4.34], [6.65, -1.19, -4.9], [1.89, -2.45, -3.78]]

# Across the Room
accs = [[0.19, 0.43, -0.99], [-0.15, -0.56, -1.1], [-0.25, 1.37, -0.64], [-0.7, -0.11, -0.75], [0.03, -0.32, -0.88], [0.49, 1.22, -0.47], [0.41, 0.14, -0.79], [0.59, 0.25, -0.78], [0.39, 0.31, -0.87], [0.51, 0.15, -0.72], [0.53, 0.37, -0.77], [0.62, 0.45, -0.74], [0.72, 0.29, -0.56], [0.28, 0.46, -0.72], [0.64, 0.24, -0.74], [0.7, 0.14, -0.69], [0.83, 0.37, -0.88], [-0.03, 0.47, -1.03], [0.76, 0.08, -0.56], [0.65, 0.1, -0.77], [0.54, 0.36, -0.59], [0.52, 0.56, -0.75], [0.84, 0.32, -0.6], [0.71, 0.36, -0.68], [0.52, 0.34, -0.92], [0.68, 0.26, -0.68], [0.25, -0.13, -0.93], [0.29, 0.26, -0.73], [0.28, 0.1, -1.02], [0.71, -0.05, -0.85], [0.51, 0.34, -0.89], [0.41, 0.27, -0.91], [0.25, 0.36, -0.85], [0.39, 0.48, -0.95], [0.39, 0.35, -0.8], [0.32, 0.04, -0.92], [0.28, 0.32, -0.61], [0.77, 0.41, -0.65], [0.43, 0.3, -0.8], [0.37, 0.46, -0.92], [0.43, 0.18, -0.9], [0.48, 0.15, -0.81], [0.41, 0.24, -0.76], [0.58, 0.3, -0.79], [0.64, 0.57, -0.85], [0.44, 0.44, -0.81], [0.4, 0.52, -0.81], [0.69, 0.36, -0.81], [0.12, 0.24, -0.92], [0.03, 0.25, -0.9], [0.39, 0.3, -0.8], [0.27, 0.3, -0.82], [-0.01, 0.41, -0.98], [0.26, 0.24, -0.84], [0.33, 0.32, -0.9], [0.31, 0.12, -0.74], [0.4, 0.45, -0.86], [0.11, 0.18, -1.01], [0.59, 0.32, -0.87], [0.26, 0.37, -1.02], [0.36, 0.29, -0.78], [0.79, 0.34, -0.72], [-0.18, 0.15, -1.31]]
gyros = [[-107.8, 43.61, 36.96], [2.94, -22.33, -10.08], [182.49, 37.24, -34.37], [351.33, 89.81, -20.51], [-261.24, 34.37, -43.26], [-47.04, 117.74, -91.91], [17.29, -7.42, 17.57], [-12.46, 42.21, -13.3], [0.28, 21.63, -44.52], [4.34, 38.08, -30.59], [48.79, 6.79, -25.55], [13.23, 15.96, -35.49], [36.61, 31.78, -8.96], [35.91, -5.67, -38.15], [52.78, -8.54, -16.45], [37.73, -3.01, -23.38], [13.86, 16.03, -24.92], [18.34, -30.45, -76.51], [48.44, 10.78, -3.43], [-23.03, -20.58, -32.41], [19.6, 45.15, -34.37], [49.21, 15.33, -28.84], [107.73, 66.64, -23.94], [43.05, -4.9, -42.56], [-22.75, 4.48, -0.07], [55.37, -6.65, -40.11], [32.55, -9.45, -14.21], [39.41, 16.45, -23.73], [-47.46, -1.26, -17.57], [48.37, 18.9, 8.96], [-12.88, -11.76, 0.35], [5.25, -1.68, -30.24], [-25.13, -2.66, -6.93], [10.64, -28.14, 2.87], [-10.92, 11.97, -25.9], [11.06, -15.19, -31.85], [45.71, 28.0, -49.77], [46.69, 20.16, -40.6], [-5.25, 21.0, -71.89], [60.27, 5.74, -9.31], [-0.14, -18.9, -42.0], [7.91, -21.84, -62.02], [19.95, 24.01, -45.85], [27.3, 23.17, -18.41], [-4.83, 36.12, -38.43], [-1.4, 30.94, -95.97], [-1.4, 0.14, -19.81], [40.25, 33.39, -14.28], [6.86, 1.82, 10.15], [-17.08, -2.17, -11.41], [41.09, 2.03, -22.05], [21.28, 21.28, -23.94], [20.16, -20.86, -26.25], [9.31, 26.46, -4.13], [-11.13, -18.2, 2.87], [21.98, 4.83, -6.3], [2.66, -23.52, -23.73], [38.85, 8.26, 4.2], [-1.33, -10.08, -18.9], [-51.31, -45.57, -22.89], [34.09, 16.59, 3.15], [25.55, -15.54, -51.38], [25.48, -42.07, -15.12]]

print(accs)
print(gyros)

# accs = [[0.3, 0.0, 0.0], [0.03, -0.1, 1.04], [0.03, -0.1, 1.04], [0.03, -0.1, 1.03], [0.1, -0.12, 1.05], [0.05, -0.11, 1.01], [0.03, -0.12, 1.05], [0.09, -0.1, 1.04], [0.03, -0.1, 1.04], [0.02, -0.09, 1.04], [0.01, -0.08, 1.05], [0.03, -0.1, 1.01], [0.1, -0.04, 1.04], [0.07, -0.01, 1.04], [0.07, -0.01, 1.04], [0.07, -0.03, 1.04], [0.07, -0.03, 1.03], [0.07, -0.04, 1.04], [-0.02, -0.33, 0.9], [-0.88, -0.18, 0.86], [-0.9, -0.25, 0.38], [-0.93, -0.33, -0.15], [-0.93, -0.34, -0.17], [-0.94, -0.34, -0.18], [-0.92, -0.35, -0.17], [-0.93, -0.34, -0.18], [-0.92, -0.34, -0.17], [-0.93, -0.33, -0.18], [-0.94, -0.32, -0.17], [-0.93, -0.32, -0.18], [-0.93, -0.32, -0.17]]
# gyros = [[0.1, 30.0, 0.0], [1.47, -2.45, -0.49], [3.01, -3.92, -0.35], [1.96, -3.22, -0.7], [3.43, -1.82, -2.87], [0.91, -2.24, -3.15], [2.59, -1.33, -6.79], [0.91, -1.68, -0.35], [1.75, -2.17, -0.28], [2.38, -1.75, -0.28], [2.8, -5.67, 7.07], [-0.84, -4.69, 17.64], [7.28, -8.05, 2.73], [6.23, -2.87, -0.28], [0.07, -7.77, -1.05], [3.15, -5.04, -0.21], [-5.46, -4.34, -0.28], [3.15, -0.56, -0.35], [-173.88, -1.61, 117.46], [0.07, 152.6, 108.85], [58.24, 69.3, -8.75], [-4.9, 1.82, 3.85], [1.54, -3.08, -0.49], [1.61, -3.85, 0.35], [2.59, -5.04, 0.98], [0.77, -4.13, 1.82], [2.52, -4.62, 0.42], [0.56, -4.13, 2.45], [0.56, 6.58, -12.18], [1.19, -2.24, -1.89], [0.91, -3.36, 1.75]]

fs = 100
cutoff_frequency = 2

order = 4
nyquist = 0.5 * fs
normal_cutoff = cutoff_frequency / nyquist
b, a = butter(order, normal_cutoff, btype='low', analog=False)

accs = filtfilt(b, a, accs, axis=0)

for i in range(len(gyros)):
  for j in range(3):
    gyros[i][j] = radians(gyros[i][j])

accs_np = np.array(accs)
gyros_np = np.array(gyros)

ekf = EKF(gyr=gyros_np, acc=accs_np)

ekf_pos = ekf.Q

print(ekf_pos)

for i in range(len(ekf_pos)):
  ekf_pos[i][1] += 0.98

pos_test = [ekf_pos[0]]

def position_from_accel(accel):
  return accel * 0.25

for i in range(len(ekf_pos)-1):
  pos_test.append(pos_test[-1] + ekf_pos[i])

accs_oriented = []

positions = [[0, 0, 0]]

# Convert quarternion to rotation matrix
# and rotate the accelerometer data
for i in range(len(accs)):
  rot_matrix = R.from_quat(ekf_pos[i])
  accs_oriented.append(np.dot(rot_matrix.as_matrix(), accs[i]))
  new_position = [
    positions[-1][0] + accs_oriented[-1][0],
    positions[-1][1] + accs_oriented[-1][1],
    positions[-1][2] + accs_oriented[-1][2]
  ]
  positions.append(new_position)

pos_x = [p[0] for p in positions]
pos_y = [p[1] for p in positions]
pos_z = [p[2] for p in positions]

create_scatter_plot(pos_x, pos_y, "x_y.png")
create_scatter_plot(pos_x, pos_z, "x_z.png")
create_scatter_plot(pos_y, pos_z, "y_z.png")
create_3d_scatter_plot(pos_x, pos_y, pos_z, "3d.png")
